# LiveKit Self-Hosting Infrastructure - SSL FIXED VERSION
# All domains will get proper Let's Encrypt certificates via DNS challenge

services:
  # LiveKit Server - The main WebRTC server
  livekit-server:
    image: livekit/livekit-server:latest
    command: ["--config", "/etc/livekit.yaml"]
    container_name: livekit-server
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ./livekit-config.yaml:/etc/livekit.yaml:ro
      - ./livekit-data:/data
    environment:
      LIVEKIT_KEYS: "APIcQP8xHwvsq7d: RJ3CeZtWyb6d3cQPDfLfDxOjVmzxJKh6pb0i3bIyeI3B"
    labels:
      # Main WebRTC endpoint - FIXED SSL
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      # HTTP API endpoint
      - "traefik.http.routers.livekit-http.rule=Host(`lk.delo.sh`)"
      - "traefik.http.routers.livekit-http.entrypoints=websecure"
      - "traefik.http.routers.livekit-http.tls=true"
      - "traefik.http.routers.livekit-http.tls.certresolver=letsencrypt"
      - "traefik.http.services.livekit-http.loadbalancer.server.port=7880"
      # WebSocket endpoint for client connections
      - "traefik.http.routers.livekit-ws.rule=Host(`lk.delo.sh`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.livekit-ws.entrypoints=websecure"
      - "traefik.http.routers.livekit-ws.tls=true"
      - "traefik.http.routers.livekit-ws.tls.certresolver=letsencrypt"
    ports:
      # RTC port range for direct peer connections (UDP)
      - "61000-61050:61000-61050/udp"
      # TCP port for signaling
      - "7881:7881/tcp"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:7880/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # LiveKit Ingress - RTMP/WHIP/WebRTC input gateway
  livekit-ingress:
    image: livekit/ingress:latest
    container_name: livekit-ingress
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ./ingress-config.yaml:/etc/ingress.yaml:ro
    environment:
      - INGRESS_CONFIG_FILE=/etc/ingress.yaml
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      # WHIP endpoint - FIXED SSL
      - "traefik.http.routers.livekit-whip.rule=Host(`lk-whip.delo.sh`)"
      - "traefik.http.routers.livekit-whip.entrypoints=websecure"
      - "traefik.http.routers.livekit-whip.tls=true"
      - "traefik.http.routers.livekit-whip.tls.certresolver=letsencrypt"
      - "traefik.http.services.livekit-whip.loadbalancer.server.port=8080"
    ports:
      # RTMP port (TCP)
      - "1935:1935/tcp"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - livekit-server

  # LiveKit Egress - Recording and streaming output
  livekit-egress:
    image: livekit/egress:latest
    container_name: livekit-egress
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ./egress-config.yaml:/etc/egress.yaml:ro
      - ./recordings:/recordings
      - ./templates:/templates:ro
    environment:
      - EGRESS_CONFIG_FILE=/etc/egress.yaml
    # Enable additional capabilities for media processing
    cap_add:
      - CAP_SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - livekit-server

  # TURN Server for NAT traversal - SSL FIXED
  coturn:
    image: coturn/coturn:latest
    container_name: livekit-coturn
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ./coturn.conf:/etc/coturn/turnserver.conf:ro
      # Mount certificate directory for TLS
      - /home/delorenj/docker/trunk-main/core/traefik/traefik-data:/ssl-certs:ro
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      # TURN server endpoint - FIXED SSL
      - "traefik.http.routers.turn.rule=Host(`lk-turn.delo.sh`)"
      - "traefik.http.routers.turn.entrypoints=websecure"
      - "traefik.http.routers.turn.tls=true"
      - "traefik.http.routers.turn.tls.certresolver=letsencrypt"
      - "traefik.http.services.turn.loadbalancer.server.port=5349"
    ports:
      # TURN/STUN ports
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "5349:5349/tcp"  # TURN over TLS
      - "5349:5349/udp"
    environment:
      - TURN_USERNAME=${TURN_USERNAME:-livekit}
      - TURN_PASSWORD=${TURN_PASSWORD:-livekit-turn-password}
      - TURN_REALM=lk-turn.delo.sh
      - TURN_SECRET=${TURN_SECRET:-livekit-turn-secret-production-2024}

  # Mac Bridge WebSocket Server
  mac-bridge:
    build: 
      context: .
      dockerfile: Dockerfile.bridge
    container_name: livekit-mac-bridge
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - BRIDGE_ENABLED=true
      - BRIDGE_HOST=0.0.0.0
      - BRIDGE_PORT=8765
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      # Bridge WebSocket endpoint
      - "traefik.http.routers.bridge.rule=Host(`lk.delo.sh`) && PathPrefix(`/bridge`)"
      - "traefik.http.routers.bridge.entrypoints=websecure"
      - "traefik.http.routers.bridge.tls=true"
      - "traefik.http.routers.bridge.tls.certresolver=letsencrypt"
      - "traefik.http.services.bridge.loadbalancer.server.port=8765"
    depends_on:
      - livekit-server
    healthcheck:
      test: ["CMD", "python3", "-c", "import websockets; import asyncio; asyncio.get_event_loop().run_until_complete(websockets.connect('ws://localhost:8765/bridge').close())"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

networks:
  proxy:
    external: true

volumes:
  livekit-data:
    driver: local
